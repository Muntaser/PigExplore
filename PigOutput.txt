2.
grunt> billsByName = LOAD 'bankdata' using TextLoader AS (line: chararray);
grunt> dump billsByName;
(Saeed,20 5 5 10 1 1 1 1 1 5 10 10 10)
(Steve,1 1 1 1 1 5 10 20 10 10 10 10)
(Mo,1 1 5 1 10 5 10 20 10 20 1 1 10 10 10)
(Todd,1 1 1 1 1 5 10 20 10 10 10 10 10 10)
(Jon,1 1 1 1 1 5 10 20 10 10 10 10 5 20 1)
(Mo,1 1 1 1 1 5 10 20 10 10 10 20 5 5 10 1 1 1 1 1 5 10 10 10)
(Ron,1 1 1 1 1 5 10 20 10 10 10 10)
(Ron,1 1 5 1 10 5 10 20 10 20 1 1 10 10 10)
(Jon,1 1 1 1 1 5 10 20 10 10 10 10 10 10)
(Todd,20 5 5 10 1 1 1 1 1 5 10 10 10)
(Mo,1 1 1 1 1 5 10 20 10 10)
(Saeed,1 1 5 1 10 5 10 20 10 20 1 1 10 10 10)
(Jon,1 1 1 1 1 5 10 20 10 10 10 10 5 20 1)
(Mo,20 5 5 10 1 1 1 1 1 5 5 5 5 5 5)
(Mo,1 1 1 1 1 5 10 20 10 10 10 10)
(Jon,1 1 1 1 1 5 5 5 5 5 5)
(Todd,20 10 10 10 10)
(Jon,20 5 5 10 1 1 1 1 1 5 5 5 5 5 5)
(Steve,1 1 1 1 1 5 10 20 10 10 10 10)
grunt> describe billsByName;                                                 
billsByName: {line: chararray}
grunt> tupleToBag = FOREACH billsByName GENERATE flatten(myudfs.TupleToBag(line));    
grunt> dump tupleToBag;
(Saeed,20)
(Saeed,5)
(Saeed,5)
(Saeed,10)
(Saeed,1)
(Saeed,1)
(Saeed,1)
(Saeed,1)
(Saeed,1)
(Saeed,5)
(Saeed,10)
(Saeed,10)
(Saeed,10)
(Steve,1)
(Steve,1)
(Steve,1)
(Steve,1)
(Steve,1)
(Steve,5)
(Steve,10)
(Steve,20)
(Steve,10)
(Steve,10)
(Steve,10)
(Steve,10)
(Mo,1)
(Mo,1)
(Mo,5)
(Mo,1)
(Mo,10)
(Mo,5)
(Mo,10)
(Mo,20)
(Mo,10)
(Mo,20)
(Mo,1)
(Mo,1)
(Mo,10)
(Mo,10)
(Mo,10)
(Todd,1)
(Todd,1)
(Todd,1)
(Todd,1)
(Todd,1)
(Todd,5)
(Todd,10)
(Todd,20)
(Todd,10)
(Todd,10)
(Todd,10)
(Todd,10)
(Todd,10)
(Todd,10)
(Jon,1)
(Jon,1)
(Jon,1)
(Jon,1)
(Jon,1)
(Jon,5)
(Jon,10)
(Jon,20)
(Jon,10)
(Jon,10)
(Jon,10)
(Jon,10)
(Jon,5)
(Jon,20)
(Jon,1)
(Mo,1)
(Mo,1)
(Mo,1)
(Mo,1)
(Mo,1)
(Mo,5)
(Mo,10)
(Mo,20)
(Mo,10)
(Mo,10)
(Mo,10)
(Mo,20)
(Mo,5)
(Mo,5)
(Mo,10)
(Mo,1)
(Mo,1)
(Mo,1)
(Mo,1)
(Mo,1)
(Mo,5)
(Mo,10)
(Mo,10)
(Mo,10)
(Ron,1)
(Ron,1)
(Ron,1)
(Ron,1)
(Ron,1)
(Ron,5)
(Ron,10)
(Ron,20)
(Ron,10)
(Ron,10)
(Ron,10)
(Ron,10)
(Ron,1)
(Ron,1)
(Ron,5)
(Ron,1)
(Ron,10)
(Ron,5)
(Ron,10)
(Ron,20)
(Ron,10)
(Ron,20)
(Ron,1)
(Ron,1)
(Ron,10)
(Ron,10)
(Ron,10)
(Jon,1)
(Jon,1)
(Jon,1)
(Jon,1)
(Jon,1)
(Jon,5)
(Jon,10)
(Jon,20)
(Jon,10)
(Jon,10)
(Jon,10)
(Jon,10)
(Jon,10)
(Jon,10)
(Todd,20)
(Todd,5)
(Todd,5)
(Todd,10)
(Todd,1)
(Todd,1)
(Todd,1)
(Todd,1)
(Todd,1)
(Todd,5)
(Todd,10)
(Todd,10)
(Todd,10)
(Mo,1)
(Mo,1)
(Mo,1)
(Mo,1)
(Mo,1)
(Mo,5)
(Mo,10)
(Mo,20)
(Mo,10)
(Mo,10)
(Saeed,1)
(Saeed,1)
(Saeed,5)
(Saeed,1)
(Saeed,10)
(Saeed,5)
(Saeed,10)
(Saeed,20)
(Saeed,10)
(Saeed,20)
(Saeed,1)
(Saeed,1)
(Saeed,10)
(Saeed,10)
(Saeed,10)
(Jon,1)
(Jon,1)
(Jon,1)
(Jon,1)
(Jon,1)
(Jon,5)
(Jon,10)
(Jon,20)
(Jon,10)
(Jon,10)
(Jon,10)
(Jon,10)
(Jon,5)
(Jon,20)
(Jon,1)
(Mo,20)
(Mo,5)
(Mo,5)
(Mo,10)
(Mo,1)
(Mo,1)
(Mo,1)
(Mo,1)
(Mo,1)
(Mo,5)
(Mo,5)
(Mo,5)
(Mo,5)
(Mo,5)
(Mo,5)
(Mo,1)
(Mo,1)
(Mo,1)
(Mo,1)
(Mo,1)
(Mo,5)
(Mo,10)
(Mo,20)
(Mo,10)
(Mo,10)
(Mo,10)
(Mo,10)
(Jon,1)
(Jon,1)
(Jon,1)
(Jon,1)
(Jon,1)
(Jon,5)
(Jon,5)
(Jon,5)
(Jon,5)
(Jon,5)
(Jon,5)
(Todd,20)
(Todd,10)
(Todd,10)
(Todd,10)
(Todd,10)
(Jon,20)
(Jon,5)
(Jon,5)
(Jon,10)
(Jon,1)
(Jon,1)
(Jon,1)
(Jon,1)
(Jon,1)
(Jon,5)
(Jon,5)
(Jon,5)
(Jon,5)
(Jon,5)
(Jon,5)
(Steve,1)
(Steve,1)
(Steve,1)
(Steve,1)
(Steve,1)
(Steve,5)
(Steve,10)
(Steve,20)
(Steve,10)
(Steve,10)
(Steve,10)
(Steve,10)



grunt> describe tupleToBag;
tupleToBag: {myudfs.tupletobag_line_26::tellerName: chararray,myudfs.tupletobag_line_26::bill: int}

3.
grunt> tellerBillGrp = group tupleToBag  by tellerName;
grunt> dump tellerBillGrp;
(Mo,{(Mo,1),(Mo,1),(Mo,1),(Mo,1),(Mo,5),(Mo,10),(Mo,10),(Mo,10),(Mo,1),(Mo,1),(Mo,1),(Mo,1),(Mo,1),(Mo,5),(Mo,10),(Mo,20),(Mo,10),(Mo,10),(Mo,20),(Mo,5),(Mo,5),(Mo,10),(Mo,1),(Mo,1),(Mo,1),(Mo,1),(Mo,1),(Mo,5),(Mo,5),(Mo,5),(Mo,5),(Mo,5),(Mo,5),(Mo,1),(Mo,1),(Mo,1),(Mo,1),(Mo,1),(Mo,5),(Mo,10),(Mo,20),(Mo,10),(Mo,10),(Mo,10),(Mo,10),(Mo,1),(Mo,1),(Mo,5),(Mo,1),(Mo,10),(Mo,5),(Mo,10),(Mo,20),(Mo,10),(Mo,20),(Mo,1),(Mo,1),(Mo,10),(Mo,10),(Mo,10),(Mo,1),(Mo,1),(Mo,1),(Mo,1),(Mo,1),(Mo,5),(Mo,10),(Mo,20),(Mo,10),(Mo,10),(Mo,10),(Mo,20),(Mo,5),(Mo,5),(Mo,10),(Mo,1)})
(Jon,{(Jon,5),(Jon,5),(Jon,10),(Jon,1),(Jon,1),(Jon,1),(Jon,1),(Jon,1),(Jon,5),(Jon,5),(Jon,5),(Jon,5),(Jon,1),(Jon,1),(Jon,1),(Jon,1),(Jon,5),(Jon,10),(Jon,20),(Jon,10),(Jon,10),(Jon,10),(Jon,10),(Jon,10),(Jon,10),(Jon,1),(Jon,1),(Jon,1),(Jon,1),(Jon,5),(Jon,10),(Jon,20),(Jon,10),(Jon,10),(Jon,10),(Jon,10),(Jon,5),(Jon,20),(Jon,1),(Jon,20),(Jon,5),(Jon,10),(Jon,10),(Jon,10),(Jon,10),(Jon,20),(Jon,10),(Jon,5),(Jon,1),(Jon,1),(Jon,1),(Jon,1),(Jon,1),(Jon,1),(Jon,1),(Jon,1),(Jon,1),(Jon,1),(Jon,5),(Jon,5),(Jon,5),(Jon,5),(Jon,5),(Jon,5),(Jon,1),(Jon,1),(Jon,1),(Jon,5),(Jon,5),(Jon,20)})
(Ron,{(Ron,1),(Ron,5),(Ron,10),(Ron,20),(Ron,10),(Ron,20),(Ron,1),(Ron,1),(Ron,10),(Ron,10),(Ron,10),(Ron,10),(Ron,1),(Ron,1),(Ron,1),(Ron,1),(Ron,1),(Ron,5),(Ron,10),(Ron,20),(Ron,10),(Ron,10),(Ron,10),(Ron,10),(Ron,1),(Ron,1),(Ron,5)})
(Todd,{(Todd,10),(Todd,10),(Todd,10),(Todd,10),(Todd,20),(Todd,10),(Todd,5),(Todd,1),(Todd,1),(Todd,1),(Todd,1),(Todd,1),(Todd,10),(Todd,5),(Todd,5),(Todd,20),(Todd,20),(Todd,10),(Todd,10),(Todd,10),(Todd,10),(Todd,10),(Todd,10),(Todd,10),(Todd,5),(Todd,10),(Todd,1),(Todd,1),(Todd,1),(Todd,1),(Todd,1),(Todd,10)})
(Saeed,{(Saeed,1),(Saeed,5),(Saeed,10),(Saeed,20),(Saeed,10),(Saeed,20),(Saeed,1),(Saeed,1),(Saeed,10),(Saeed,10),(Saeed,10),(Saeed,10),(Saeed,20),(Saeed,5),(Saeed,5),(Saeed,10),(Saeed,1),(Saeed,1),(Saeed,1),(Saeed,1),(Saeed,1),(Saeed,5),(Saeed,10),(Saeed,10),(Saeed,10),(Saeed,1),(Saeed,1),(Saeed,5)})
(Steve,{(Steve,1),(Steve,10),(Steve,10),(Steve,10),(Steve,10),(Steve,20),(Steve,5),(Steve,1),(Steve,1),(Steve,1),(Steve,1),(Steve,5),(Steve,10),(Steve,20),(Steve,10),(Steve,10),(Steve,10),(Steve,10),(Steve,1),(Steve,1),(Steve,10),(Steve,1),(Steve,1),(Steve,1)})

grunt> tots = foreach tellerBillGrp generate group, SUM(tupleToBag.bill) as bill;                         ;    
grunt> dump tots;
(Mo,480)
(Jon,422)
(Ron,195)
(Todd,240)
(Saeed,195)
(Steve,160)

grunt> ordgrp = ORDER tots  BY bill DESC;                                                        
grunt> dump ordgrp;                      
(Mo,480)
(Jon,422)
(Todd,240)
(Ron,195)
(Saeed,195)
(Steve,160)

4.
grunt> filterSaeed = filter tots  by group == 'Saeed';   
grunt> dump filterSaeed;
(Saeed,195)

grunt> filteredTeller = filter tots  by bill == filterSaeed.bill and group != 'Saeed';
grunt> teller = foreach filteredTeller generate group;                                
grunt> dump teller;
(Ron)
grunt> dump filteredTeller;                                                           
(Ron,195)
